{{define "get_by_id"}}
{{- $entityStructName := pascalCase .Name }}
{{- $entityTableName := snakeCase .Name }}
{{- $entityArgumentName := camelCase .Name }}

func (d *{{$entityStructName}}DAL) GetByID(ctx context.Context, id int64) (*{{$entityStructName}}, error) {
    if d.configProvider.BlockedReads("{{$entityTableName}}") {
        return nil, ErrOperationBlocked
    }

    const operation = "get_by_id"
    dalOperationsTotalCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()

	// Load from cache
    cachedEntity, _ := d.getByIDCached(id)
    if cachedEntity != nil {
        return cachedEntity, nil
    }

	// Fallback to database if cache miss or decoding fails
	result, err := d.dbBreaker.Execute(func() (interface{}, error) {
		return d.getByID(ctx, id)
	})

	if err != nil {
		return nil, err
	}

	entity, ok := result.(*{{$entityStructName}})
    if !ok {
        return nil, fmt.Errorf("invalid type")
    }

    _ = d.setCached(entity)

    return entity, err
}

func (d *{{$entityStructName}}DAL) setCached(entity *{{$entityStructName}}) error {
    // if we have not reached the maximum number of items set the cache. otherwise expirations will
	// handle this
    itemCount := d.cache.ItemCount()
    if itemCount < {{.Caching.MaxItemsCount}} {
        cacheKey := d.getCacheKey(entity.ID)

        // Store in cache with new format
        dalCacheWritesCounter.WithLabelValues("{{$entityTableName}}").Inc()
        dalCacheSizeGauge.WithLabelValues("{{$entityTableName}}").Set(float64(itemCount+1))

        copy := *entity
		d.cache.Set(cacheKey, &copy, time.Second*{{.Caching.SingleExpirationSeconds}})
    }

    return nil
}

// Gets entity from cache only or return nil
func (d *{{$entityStructName}}DAL) getByIDCached(id int64) (*{{$entityStructName}}, error) {
    const operation = "get_by_id"
    cacheKey := d.getCacheKey(id)
    val, found := d.cache.Get(cacheKey)
    if found {
        entity, ok := val.(*{{$entityStructName}})
        if !ok {
            return nil, fmt.Errorf("{{$entityStructName}}DAL.GetById: Cache returned wrong type")
        }

        dalCacheHitsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
        copy := *entity
        return &copy, nil
    }

    // Cache missed or error during fetching cached data
	dalCacheMissesCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()

    return nil, nil
}

func (d *{{$entityStructName}}DAL) getByID(ctx context.Context, id int64) (*{{$entityStructName}}, error) {
    const operation = "get_by_id"
    dbStart := time.Now();

    query := `
        SELECT {{querySelect .Columns}}
        FROM {{$entityTableName}}s
        WHERE id = ?
    `

    db, dbErr := d.dbProvider.GetDatabase("{{$entityArgumentName}}", false);
    if dbErr != nil {
        dbRequestsErrorsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
        return nil, dbErr
    }

    row := db.QueryRowContext(ctx, query, id)
    var entity {{$entityStructName}}
    err := row.Scan(
        &entity.ID,
        &entity.version,
        {{- range $colName, $col := .Columns}}&entity.{{$colName | pascalCase}},{{- end}}
        &entity.Created,
        &entity.Updated,
    )
    if err != nil {
        if errors.Is(err, sql.ErrNoRows) {
            return nil, ErrNotFound
        }
        dbRequestsErrorsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
        return nil, fmt.Errorf("failed to get {{$entityStructName}} by ID: %w", err)
    }

    dbRequestsLatencyHistogram.WithLabelValues("{{$entityTableName}}", operation).Observe(time.Since(dbStart).Seconds())
    return &entity, nil
}

{{end}}

