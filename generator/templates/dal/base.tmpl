/**
  NOTE! This code is autogenerated.
  Don't manually change this code.
*/
package dal

import (
    "bytes"
    "context"
    "encoding/gob"
    "database/sql"
    "errors"

    "fmt"
    "time"

    "github.com/redis/go-redis/v9"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/sony/gobreaker"
)

var (
    ErrNotFound = errors.New("{{.Name | snakeCase}} not found")

    dalOperationsTotal = prometheus.NewCounterVec(
        prometheus.CounterOpts{
            Name: "dal_operations_total",
            Help: "Total number of DAL operation requests",
        },
        []string{"entity", "operation"},
    )

    dbRequestsErrors = prometheus.NewCounterVec(
        prometheus.CounterOpts{
            Name: "db_requests_errors_total",
            Help: "Total number of failed DB requests",
        },
        []string{"entity", "operation"},
    )

    dbRequestsLatency = prometheus.NewHistogramVec(
        prometheus.HistogramOpts{
            Name:    "db_requests_latency_seconds",
            Help:    "Latency distribution of DB requests",
            Buckets: prometheus.DefBuckets,
        },
        []string{"entity", "operation"},
    )

    dalCacheWrites = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "dal_cache_writes_total",
			Help: "Total number of DAL cache writes",
		},
		[]string{"entity", "operation"},
	)
    dalCacheDeletes = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "dal_cache_deletes_total",
			Help: "Total number of DAL cache removals (invalidations)",
		},
		[]string{"entity"},
	)
    dalCacheHits = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "dal_cache_hits_total",
			Help: "Total number of DAL cache hits",
		},
		[]string{"entity", "operation"},
	)
    dalCacheErrors = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "dal_cache_errors_total",
			Help: "Total number of DAL cache errors",
		},
		[]string{"entity", "operation"},
	)
	dalCacheMisses = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "dal_cache_misses_total",
			Help: "Total number of DAL cache misses",
		},
		[]string{"entity", "operation"},
	)
	dalCacheLatency = prometheus.NewHistogramVec(
		prometheus.HistogramOpts{
			Name:    "dal_cache_latency_seconds",
			Help:    "Latency distribution of DAL cache operations",
			Buckets: prometheus.DefBuckets,
		},
		[]string{"entity", "operation"},
	)
)

func init() {
    prometheus.MustRegister(dalOperationsTotal, dbRequestsErrors, dbRequestsLatency)
   	prometheus.MustRegister(dalCacheHits, dalCacheMisses, dalCacheLatency, dalCacheWrites, dalCacheErrors, dalCacheDeletes)
	gob.Register(User{})
}


type {{.Name | pascalCase}} struct {
    ID        int64
    {{range $colName, $col := .Columns}}
    {{$colName | pascalCase}} {{toGoType $col.Type .AllowNull}} `json:"{{$colName | snakeCase}}"`{{end}}

    Created   time.Time
    Updated   time.Time
}

type {{.Name | pascalCase}}DAL struct {
    db      *sql.DB
    cache       *redis.Client
	dbBreaker   *gobreaker.CircuitBreaker
	cacheBreaker *gobreaker.CircuitBreaker
}

func New{{.Name | pascalCase}}DAL(db *sql.DB, cache *redis.Client, dbSettings, cacheSettings gobreaker.Settings) *{{.Name | pascalCase}}DAL {
    if dbSettings.Name == "" {
        dbSettings.Name = "{{.Name | snakeCase}}_dal"
    }
    if dbSettings.ReadyToTrip == nil {
        dbSettings.ReadyToTrip = func(counts gobreaker.Counts) bool {
            return counts.ConsecutiveFailures > 5
        }
    }
    if dbSettings.Timeout == 0 {
        dbSettings.Timeout = time.Second * 30
    }

    if cacheSettings.Name == "" {
		cacheSettings.Name = "{{.Name | snakeCase}}_dal_cache"
	}
	if cacheSettings.ReadyToTrip == nil {
		cacheSettings.ReadyToTrip = func(counts gobreaker.Counts) bool {
			return counts.ConsecutiveFailures > 3
		}
	}
	if cacheSettings.Timeout == 0 {
		cacheSettings.Timeout = time.Second * 10
	}

    return &{{.Name | pascalCase}}DAL{
        db:      db,
        cache:        cache,
		dbBreaker:    gobreaker.NewCircuitBreaker(dbSettings),
		cacheBreaker: gobreaker.NewCircuitBreaker(cacheSettings),
    }
}

{{/* Core operations template */}}
{{template "get_by_id" .}}
{{template "invalidate_cache" .}}

{{- if and .Operations .Operations.Gets}}
/* Custom Get operations */
    {{- range .Operations.Gets}}
        {{template "get_operation" (dict "Root" $ "ColumnName" .)}}
    {{- end}}
{{- end}}

{{- if and .Operations .Operations.Lists}}
/* Custom Lists operations */
    {{- range .Operations.Lists}}
        {{- if eq . "id"}}
            {{template "list_by_id" (dict "Root" $ "ColumnName" .)}}
        {{- else}}
            {{template "list_operation" (dict "Root" $ "ColumnName" .)}}
        {{- end}}
    {{- end}}
{{- end}}

/* Delete operations */
{{template "delete" (dict "Root" $ "ColumnName" "id")}}

{{- if and .Operations .Operations.Store}}
/* Store operations */
{{template "create" (dict "Root" $ "ColumnName" "id")}}
{{template "update" (dict "Root" $ "ColumnName" "id")}}
{{template "store" (dict "Root" $ "ColumnName" "id")}}
{{- end}}
