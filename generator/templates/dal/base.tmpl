/*
NOTE! This code is autogenerated.
Don't manually change this code.
Version [{{.TemplateVersion}}]
*/
package dal

{{- $entityStructName := pascalCase .Name }}
{{- $entityTableName := snakeCase .Name }}
{{- $entityArgumentName := camelCase .Name }}

import (
    "context"
    "encoding/gob"
    "database/sql"
    "errors"
    "strings"

    "fmt"
    "time"

    "github.com/patrickmn/go-cache"
    "github.com/sony/gobreaker"
)

func init() {
	gob.Register(User{})
}


type {{$entityStructName}} struct {
    ID        int64
    version   int32
    {{range $colName, $col := .Columns}}
    {{$colName | pascalCase}} {{toGoType $col.Type .AllowNull}} `json:"{{$colName | snakeCase}}"`{{end}}

    Created   time.Time
    Updated   time.Time
}

type {{$entityStructName}}DAL struct {
    dbProvider          DBProvider
    cache               *cache.Cache  // Simple TTL cache for single items, for inmemory cache management
  	listCache           *cache.Cache // Cache for lists. Simple TTL cache, for inmemory cache management
    countCache          *cache.Cache // Cache for counts. Simple TTL cache, for inmemory cache management
    cacheProvider       CacheProvider
    configProvider      ConfigProvider
	dbBreaker           *gobreaker.CircuitBreaker
}

func New{{$entityStructName}}DAL(provider DBProvider, cacheProvider CacheProvider,
    configProvider ConfigProvider, dbSettings gobreaker.Settings) *{{$entityStructName}}DAL {

    if configProvider == nil {
        configProvider = DefaultConfigProvider{}
    }

    if cacheProvider == nil {
        cacheProvider = NoopCacheProvider{}
    }

    if dbSettings.Name == "" {
        dbSettings.Name = "{{$entityTableName}}_dal"
    }
    if dbSettings.ReadyToTrip == nil {
        dbSettings.ReadyToTrip = func(counts gobreaker.Counts) bool {
            return counts.ConsecutiveFailures > {{.CircuitBreaker.ConsecutiveFailures}}
        }
    }
    if dbSettings.OnStateChange == nil {
		dbSettings.OnStateChange = OnCircuitBreakerStateChange
	}

    if dbSettings.Timeout == 0 {
        dbSettings.Timeout = time.Second * {{.CircuitBreaker.TimeoutSeconds}}
    }

    // Default expiration is 5 minutes and cleanup of 10 minutes
   	singleCache := cache.New(5*time.Minute, 10*time.Minute)
	listCache := cache.New(5*time.Minute, 10*time.Minute)
    countCache := cache.New(5*time.Minute, 10*time.Minute)

    newDAL := &{{$entityStructName}}DAL{
        dbProvider:     provider,
        cache:          singleCache,
        listCache:      listCache,
        countCache:     countCache,
        cacheProvider:  cacheProvider,
        configProvider: configProvider,
		dbBreaker:      gobreaker.NewCircuitBreaker(dbSettings),
    }

    // initialize cache invalidation handler
    cacheProvider.OnCacheInvalidated("{{$entityTableName}}", newDAL.onCacheInvalidated)
    cacheProvider.OnCacheFlushList("{{$entityTableName}}", newDAL.onCacheFlushList)

    return newDAL
}

func (d *{{$entityStructName}}DAL) getCacheKey(id int64) string {
    return fmt.Sprintf("{{$entityTableName}}_id:%d", id)
}

{{template "invalidate_cache" (dict "Root" $ "ColumnName" "id")}}

{{- if and .Operations .Operations.Store}}
{{template "create" (dict "Root" $ "ColumnName" "id")}}
{{template "create_bulk" (dict "Root" $ "ColumnName" "id")}}
{{template "update" (dict "Root" $ "ColumnName" "id")}}
{{template "store" (dict "Root" $ "ColumnName" "id")}}
{{- end}}

{{- if and .Operations .Operations.Delete}}
{{template "delete" (dict "Root" $ "ColumnName" "id")}}
{{- end}}

{{template "get_by_id" .}}
{{- if and .Operations .Operations.Gets }}
    {{- range .Operations.Gets }}
        {{- if ne . "id"}}
{{template "get_operation" (dict "Root" $ "ColumnName" .)}}
        {{- end }}
    {{- end }}
{{- end }}

{{- if and .Operations .Operations.Lists }}
    {{- range .Operations.Lists }}
{{template "list_operation" (dict "Root" $ "List" .)}}
    {{- end }}
{{- end }}

{{- if and .Operations .Operations.Lists }}
    {{- range .Operations.Lists }}
{{template "count_operation" (dict "Root" $ "List" .)}}
    {{- end }}
{{- end }}
