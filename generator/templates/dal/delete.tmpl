{{define "delete"}}
{{- $entityStructName := pascalCase .Root.Name }}
{{- $entityTableName := snakeCase .Root.Name }}
{{- $entityArgumentName := camelCase .Root.Name }}

// Deletes entity by id,
// returns ErrNotFound in case nothing is deleted.
func (d *{{$entityStructName}}DAL) Delete(ctx context.Context, entity *{{$entityStructName}}) error {
    if d.configProvider.BlockedWrites("{{$entityTableName}}") {
        return ErrOperationBlocked
    }

	if entity.ID == 0 {
		// nothing can be deleted as entity is not created.
		return ErrNotFound
	}

	const operation = "delete"
	dalOperationsTotalCounter.WithLabelValues("{{$entityTableName }}", operation).Inc()

	_, err := d.dbBreaker.Execute(func() (interface{}, error) {
		return nil, d.delete(ctx, entity.ID)
	})

	if err != nil {
		return err
	}

	// Lets clear item from cache and on next use use DB as source of truth
	d.InvalidateCache(entity)
	d.FlushListCache()

	return err
}

func (d *{{$entityStructName}}DAL) delete(ctx context.Context, id int64) error {
	start := time.Now()
	const operation = "delete"

	query := `
		DELETE FROM {{$entityTableName}}s
		WHERE id = ?
	`

    db, dbErr := d.dbProvider.GetDatabase("{{$entityArgumentName}}", true);
    if dbErr != nil {
		dbRequestsErrorsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
        return dbErr
    }

	res, err := db.ExecContext(ctx, query, id)
	if err != nil {
		dbRequestsErrorsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
		return fmt.Errorf("failed to delete {{$entityTableName}}: %w", err)
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		dbRequestsErrorsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
		return fmt.Errorf("failed to get rows affected: %w", err)
	}

	if rowsAffected == 0 {
		return ErrNotFound
	}

	dbRequestsLatencyHistogram.WithLabelValues("{{$entityTableName}}", operation).Observe(time.Since(start).Seconds())
	return nil
}
{{end}}
