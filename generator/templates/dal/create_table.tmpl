{{define "create_table"}}
{{- $column := index .Root.Columns .ColumnName }}
{{- $entityStructName := pascalCase .Root.Name }}
{{- $entityTableName := snakeCase .Root.Name }}
{{- $entityArgumentName := camelCase .Root.Name }}

//go:embed {{$entityTableName}}.sql
var schema{{$entityStructName}} string

func (d *{{$entityStructName}}DAL) CreateTable(ctx context.Context) error {
	// Get write database connection
	dbs := d.dbProvider.AllDatabases("{{$entityArgumentName}}", "write")

	for _, db := range dbs {
		// First check if table exists
		exists, err := d.tableExists(ctx, db)
		if err != nil {
			return fmt.Errorf("failed to check table existence: %w", err)
		}
		if exists {
			return nil
		}

		// Split into individual statements
		statements := strings.Split(schema{{$entityStructName}}, ";")

		for _, stmt := range statements {
			stmt = strings.TrimSpace(stmt)
			if stmt == "" || strings.HasPrefix(stmt, "#") {
				continue
			}

			_, err = db.ExecContext(ctx, stmt)
			if err != nil {
				return fmt.Errorf("failed to execute SQL statement %q: %w", stmt, err)
			}
		}
	}

	return nil
}

func (d *{{$entityStructName}}DAL) tableExists(ctx context.Context, db *sql.DB) (bool, error) {
	query := `
		SELECT 1
		FROM information_schema.tables 
		WHERE table_schema = DATABASE() 
		AND table_name = '{{$entityTableName}}s'
	`

	var exists bool
	err := db.QueryRowContext(ctx, query).Scan(&exists)
	if errors.Is(err, sql.ErrNoRows) {
		return false, nil
	}
	if err != nil {
		return false, fmt.Errorf("failed to query table existence: %w", err)
	}

	return exists, nil
}

{{end}}