{{define "invalidate_cache"}}
{{- $entityStructName := pascalCase .Root.Name }}
{{- $entityTableName := snakeCase .Root.Name }}
{{- $entityArgumentName := camelCase .Root.Name }}

func (d *{{$entityStructName}}DAL) InvalidateCache(entity *{{$entityStructName}}) {
    cacheKey := d.getCacheKey(entity.ID)
	d.cache.Delete(cacheKey)

	// Invalidate cache entry across instances
	d.cacheProvider.InvalidateCache("{{$entityTableName}}", cacheKey)
}

func (d *{{$entityStructName}}DAL) FlushListCache() {
    {{- if eq .Root.Caching.ListInvalidation "flush"}}
    d.listCache.Flush()

    // Invalidate cache entry across instances
    d.cacheProvider.FlushListCache("{{$entityTableName}}")
    {{- end}}
}


// Handles cache invalidations. Just remove cached entry by key
func (d *{{$entityStructName}}DAL) onCacheInvalidated(key string) {
    d.cache.Delete(key)
}

// Handles cache_flush_list. Just clears all lists cache.
func (d *{{$entityStructName}}DAL) onCacheFlushList() {
    {{- if eq .Root.Caching.ListInvalidation "flush"}}
    d.listCache.Flush()
    {{- end }}
}

{{end}}
