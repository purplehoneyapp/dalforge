{{define "get_operation"}}
{{- $column := index .Root.Columns .ColumnName }}
{{- $entityStructName := pascalCase .Root.Name }}
{{- $entityTableName := snakeCase .Root.Name }}
{{- $entityArgumentName := camelCase .Root.Name }}

func (d *{{$entityStructName}}DAL) GetBy{{.ColumnName | pascalCase}}(ctx context.Context, {{.ColumnName | camelCase}} {{toGoType $column.Type $column.AllowNull}}) (*{{$entityStructName}}, error) {
    if d.configProvider.BlockedReads("{{$entityTableName}}") {
        return nil, ErrOperationBlocked
    }

    const operation = "get_by_{{.ColumnName | snakeCase}}"
    dalOperationsTotalCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()

    // key would for example be: user_email:test@something.com, but in this case cache is only mapping email -> id
    cacheKey := fmt.Sprintf("{{$entityTableName}}_{{.ColumnName | snakeCase}}:%v", {{.ColumnName | camelCase}})

    // Fetch from cache {{.ColumnName | pascalCase}} -> ID mapping
    val, found := d.cache.Get(cacheKey)
    if found {
        entityId, ok := val.(int64)
        if !ok {
            return nil, fmt.Errorf("{{$entityStructName}}DAL.GetBy{{.ColumnName | pascalCase}}: Cache returned wrong type; expected ID type")
        }

        dalCacheHitsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
        // return entity by that id
        return d.GetByID(ctx, entityId)
    }

    // Cache missed or error during fetching cached data
	dalCacheMissesCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()

	// Fallback to database if cache miss or decoding fails
	result, err := d.dbBreaker.Execute(func() (interface{}, error) {
		return d.getBy{{.ColumnName | pascalCase}}(ctx, {{.ColumnName | camelCase}})
	})

	if err != nil {
		return nil, err
	}
	entity := result.(*{{$entityStructName}})

	// Store in cache {{.ColumnName | pascalCase}} -> ID mapping
    dalCacheWritesCounter.WithLabelValues("{{$entityTableName}}").Inc()
    d.cache.Set(cacheKey, entity.ID, time.Second*{{.Root.Caching.SingleExpirationSeconds}})

    return entity, err
}

func (d *{{$entityStructName}}DAL) getBy{{.ColumnName | pascalCase}}(ctx context.Context, {{.ColumnName | camelCase}} {{toGoType $column.Type $column.AllowNull}}) (*{{$entityStructName}}, error) {
    const operation = "get_by_{{.ColumnName | snakeCase}}"
    dbStart := time.Now()

    query := `
        SELECT {{querySelect .Root.Columns}}
        FROM {{$entityTableName}}s
        WHERE {{.ColumnName | snakeCase}} = ?
    `

    db, dbErr := d.dbProvider.GetDatabase("{{$entityArgumentName}}", false);
    if dbErr != nil {
        dbRequestsErrorsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
        return nil, dbErr
    }

    row := db.QueryRowContext(ctx, query, {{.ColumnName | camelCase}})
    var entity {{$entityStructName}}
    err := row.Scan(
        &entity.ID,
        &entity.version,
        {{range $colName, $col := .Root.Columns}}{{if ne $colName "id"}}&entity.{{$colName | pascalCase}},
        {{end}}{{end}}&entity.Created,
        &entity.Updated,
    )
    if err != nil {
        if errors.Is(err, sql.ErrNoRows) {
            return nil, ErrNotFound
        }

        dbRequestsErrorsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
        return nil, fmt.Errorf("failed to get {{$entityStructName}} by {{.ColumnName | pascalCase}}: %w", err)
    }

    dbRequestsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
    dbRequestsLatencyHistogram.WithLabelValues("{{$entityTableName}}", operation).Observe(time.Since(dbStart).Seconds())
    return &entity, nil
}
{{end}}
