{{define "update"}}
{{- $entityStructName := pascalCase .Root.Name }}
{{- $entityTableName := snakeCase .Root.Name }}
{{- $entityArgumentName := camelCase .Root.Name }}

// ErrNotFound is returned in case there was nothing to update; either missing id or newer version of entity is already stored.
func (d *{{$entityStructName}}DAL) Update(ctx context.Context, entity *{{$entityStructName}}) error {
    if d.configProvider.BlockedWrites("{{$entityTableName}}") {
        return ErrOperationBlocked
    }

	const operation = "update"
	dalOperationsTotalCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()

	// 1. Get existing entity to check for changes. Required for proper cache invalidation.
	existing, err := d.GetByID(ctx, entity.ID)
	if err != nil {
		return fmt.Errorf("failed to get existing {{$entityStructName}}, id: %v, err: %w", entity.ID, err)
	}

	// 2. Check if any unique column used in Gets changed
	{{checkColumnsChanged .Root}}

	// Perform the update in DB.
	_, err = d.dbBreaker.Execute(func() (interface{}, error) {
		return nil, d.update(ctx, entity)
	})

	if err != nil {
		return err
	}

	{{invalidateUniqueColumnsCache .Root}}

	// Lets clear item from cache and on next use use DB as source of truth
	d.InvalidateCache(entity)
	d.FlushListCache()

	entity.version++

	return nil
}

func (d *{{$entityStructName}}DAL) update(ctx context.Context, entity *{{$entityStructName}}) error {
	const operation = "update"
	start := time.Now()

	entity.Updated = time.Now()

	query := `
		UPDATE {{$entityTableName}}s
		SET {{template "comma_separated_update" .}}, updated=?, version = version + 1
		WHERE id = ? AND version = ?
	`

    db, dbErr := d.dbProvider.GetDatabase("{{$entityArgumentName}}", true);
    if dbErr != nil {
		dbRequestsErrorsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
        return dbErr
    }

	res, err := db.ExecContext(ctx, query,
    {{- goFuncCallParameters "entity" .Root.Columns }},
	entity.Updated, entity.ID, entity.version)

	if err != nil {
		dbRequestsErrorsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
		return fmt.Errorf("failed to update {{$entityStructName}}: %w", err)
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		dbRequestsErrorsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
		return fmt.Errorf("failed to get rows affected: %w", err)
	}

	if rowsAffected == 0 {
		return ErrNotFound
	}

	dbRequestsLatencyHistogram.WithLabelValues("{{$entityTableName}}", operation).Observe(time.Since(start).Seconds())

	return nil
}
{{end}}

{{define "comma_separated_update"}}
	{{- $total := len .Root.Columns -}}
	{{- $index := 0 -}}
	{{- range $colName, $col := .Root.Columns -}}
		{{$colName | snakeCase}} = ?{{- $index = add $index 1 -}}{{- if lt $index $total }}, {{- end}}
	{{- end}}
{{- end}}
