{{define "create"}}
{{- $column := index .Root.Columns .ColumnName }}
{{- $entityStructName := pascalCase .Root.Name }}
{{- $entityTableName := snakeCase .Root.Name }}
{{- $entityArgumentName := camelCase .Root.Name }}

func (d *{{$entityStructName}}DAL) Create(ctx context.Context, entity *{{$entityStructName}}) (*{{$entityStructName}}, error) {
    if d.configProvider.BlockedWrites("{{$entityTableName}}") {
        return nil, ErrOperationBlocked
    }

	if entity.ID > 0 {
		return nil, fmt.Errorf("{{$entityStructName}}DAL.Create failed as ID > 0")
	}

	const operation = "create"
	dalOperationsTotalCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()

	_, err := d.dbBreaker.Execute(func() (interface{}, error) {
		return d.create(ctx, entity)
	})

	if err != nil {
		return nil, err
	}

	d.setCached(entity)

	// All lists cache should be flushed.
	d.FlushListCache()

	return entity, err
}

func (d *{{$entityStructName}}DAL) create(ctx context.Context, entity *{{$entityStructName}}) (*{{$entityStructName}}, error) {
	const operation = "create"
	start := time.Now()

	entity.Created = time.Now()
	entity.Updated = time.Now()

	query := `
		INSERT INTO {{$entityTableName}}s ({{template "comma_separated_columns" .Root.Columns}},created,updated)
		VALUES (
			{{- range $index, $colName := keys .Root.Columns -}}?,{{- end }}?,?)
	`

    db, dbErr := d.dbProvider.GetDatabase("{{$entityArgumentName}}", true);
    if dbErr != nil {
		dbRequestsErrorsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
        return nil, dbErr
    }

	result, err := db.ExecContext(ctx, query,
		{{- goFuncCallParameters "entity" .Root.Columns }},
		entity.Created, entity.Updated)

	if err != nil {
		dbRequestsErrorsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
		return nil, fmt.Errorf("failed to insert {{$entityStructName}}: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		dbRequestsErrorsCounter.WithLabelValues("{{$entityTableName}}", operation).Inc()
		return nil, fmt.Errorf("failed to get last insert ID: %w", err)
	}

	entity.ID = id
	dbRequestsLatencyHistogram.WithLabelValues("{{$entityTableName}}", operation).Observe(time.Since(start).Seconds())
	return entity, nil
}
{{end}}

{{define "comma_separated_columns"}}
	{{- $total := len . -}}
	{{- $index := 0 -}}
	{{- range $colName, $col := . -}}
		{{$colName | snakeCase}},
	{{- end}}
{{end}}
